<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
       <!--default-init-method="turnOnLights"-->
       <!--default-destroy-method="turnOffLights"-->

    <bean id="duke" class="org.xander.spring.springIdol.Juggler" />

    <bean id="dukeMightyJuggler" class="org.xander.spring.springIdol.Juggler">
        <constructor-arg value="25"/>
    </bean>

    <bean id="sonnet29" class="org.xander.spring.springIdol.Sonnet29">
    </bean>
    <bean id="poeticDuke" class="org.xander.spring.springIdol.PoeticJuggler">
        <constructor-arg value="#{(T(java.lang.Math).random() * 4)^2}" />
        <constructor-arg ref="sonnet29" />
        <!--<constructor-arg>-->
            <!--<bean class="org.xander.spring.springIdol.Sonnet29" />-->
        <!--</constructor-arg>-->
    </bean>

    <bean id="stage" class="org.xander.spring.springIdol.Stage"
          factory-method="getInstance" />

    <bean id="ticket" class="org.xander.spring.springIdol.Ticket" scope="prototype" />

    <bean id="auditorium" class="org.xander.spring.springIdol.Auditorium"
          init-method="turnOnTheLights"
          destroy-method="turnOffTheLights"/>

    <bean id="saxophone" class="org.xander.spring.springIdol.Saxophone" />

    <bean id="kennySaxophonist" class="org.xander.spring.springIdol.Instrumentalist">
        <!--<property name="song" value="Jingle Bells"/>-->
        <property name="instrument" ref="saxophone"/>
    </bean>

    <bean id="kennySinger" class="org.xander.spring.springIdol.Instrumentalist">
        <property name="song" value="#{'Jingle Bells'}"/>
        <property name="instrument" ref="harmonica"/>
        <!--<property name="age"  value="37"/>-->
    </bean>

    <bean id="otherKenny" class="org.xander.spring.springIdol.Instrumentalist"
        p:song="Jingle Bells"
        p:instrument-ref="saxophone" />
        <!--<property name="instrument" >-->
            <!--<bean class="org.xander.spring.springIdol.Saxophone" />-->
        <!--</property>-->

    <bean id="guitar" class="org.xander.spring.springIdol.Guitar" >
        <!--<qualifier value="stringed"/>-->
        <!--<qualifier value="strummed"/>-->
        <property name="numberOfStrings" value="#{1e3}"/>
    </bean>

    <bean id="harmonica" class="org.xander.spring.springIdol.Harmonica" />
    <bean id="piano" class="org.xander.spring.springIdol.Piano" >
        <qualifier value="yamaha"/>
    </bean>


    <bean id="hank" class="org.xander.spring.springIdol.OneManBand">
        <property name="instruments">
            <list>
                <ref bean="guitar" />
                <ref bean="harmonica" />
            </list>
            <!--<set>-->
                <!--<ref bean="guitar" />-->
                <!--<ref bean="guitar" />-->
                <!--<ref bean="harmonica" />-->
                <!--<ref bean="harmonica" />-->
            <!--</set>-->
        </property>
    </bean>

    <bean id="advancedBand" class="org.xander.spring.springIdol.OneManAdvancedBand">
        <property name="instruments">
            <map>
                <entry key="GUITAR" value-ref="guitar"/>
                <entry key="HARMONICA" value-ref="harmonica"/>
                <entry key="#{T(java.lang.Math).PI}" value-ref="harmonica"/>
            </map>
            <!--<props>-->
                <!--<prop key="GUITAR">STRUM STRUM STRUM</prop>-->
                <!--<prop key="CYMBAL">CRASH CRASH CRASH</prop>-->
                <!--<prop key="HARMONICA">HUM HUM HUM</prop>-->
            <!--</props>-->
        </property>


        <!--<property name="nullProperty"><null> /></property>-->
    </bean>

    <bean id="carl" class="org.xander.spring.springIdol.Instrumentalist">

       <!--<property name="song" value="#{kennySaxophonist.song?.toUpperCase()}"/> &lt;!&ndash; try to remove ? and see the null pointer&ndash;&gt;-->
        <!--elvis operator-->
       <property name="song" value="#{kennySaxophonist.song ?: 'GreenLeaves'}"/> <!-- if song is null - use GreenLeaves-->

        <!--<property name="instrument" value="#{guitar}"/>-->
        <property name="instrument"
                  value="#{'Jingle Bells'.substring(0, 6).equals('Jingle')?guitar:saxophone}"/>  <!--condition-->

        <!--<property name="quality" value="#{5 == <= >= ! le eq lt le 3 and or not ! 5==5}"/>-->
        <!--<property name="largeCircle"-->
                  <!--value="#{shape.kind == 'circle' and shape.perimeter gt 10000}"/>-->

        <!--<property name="validEmail" value=-->
                <!--"#{admin.email matches '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.com'}"/>     regex  -->

    </bean>

    <util:list id="cities">
        <bean id="Chicago" class="org.xander.spring.springIdol.City"
              p:name="Chicago" p:state="IL" p:population="2853114"/>
        <bean class="org.xander.spring.springIdol.City"
              p:name="Atlanta" p:state="GA" p:population="537958"/>
        <bean class="org.xander.spring.springIdol.City"
              p:name="Dallas" p:state="TX" p:population="1279910"/>
        <bean class="org.xander.spring.springIdol.City"
              p:name="Houston" p:state="TX" p:population="2242193"/>
        <bean class="org.xander.spring.springIdol.City"
              p:name="Odessa" p:state="TX" p:population="90943"/>
        <bean class="org.xander.spring.springIdol.City"
              p:name="El Paso" p:state="TX" p:population="613190"/>
        <bean class="org.xander.spring.springIdol.City"
              p:name="Jal" p:state="NM" p:population="1996"/>
        <bean class="org.xander.spring.springIdol.City"
              p:name="Las Cruces" p:state="NM" p:population="91865"/>
    </util:list>

    <bean id="countryDescription" class="org.xander.spring.springIdol.CountryDescription">
        <!--<constructor-arg value="#{cities[T(java.lang.Math).random() * cities.size()]}"/>-->
        <!--<constructor-arg value="#{cities.^[population gt 100000]}"/>-->
        <constructor-arg value="#{cities.$[population gt 100000]}"/>
        <!--^[] and .$[], for selecting the first-->
        <!--and last matching items (respectively) from a collection.-->


        <property name="emptyString" value="#{systemEnvironment['HOME']}"/>
        <!--<property name="emptyString" value="#{systemProperties['application.home']}"/>   check for VM option-->
        <!--<property name="list" value="#{cities.![name]}" />-->
        <!--<property name="list" value="#{cities.![name + ', ' + state]}"/>-->
        <property name="list"
                  value="#{cities.?[population gt 100000].![name + ', ' + state]}"/>
    </bean>

    <!--<util:properties id="settings"-->
                     <!--location="classpath:settings.properties"/>-->
    <!--'This is a test'[3]  checks for s-->

    <!--When you added <context:annotation-config> to your Spring configuration, you-->
    <!--told Spring that you wanted it to honor a certain set of annotations in the beans that-->
    <!--you declared and to use those beans to guide bean wiring.-->
    <!--<context:annotation-config />-->


    <!-- The <context:component-scan> element works by scanning a package and all of its-->
    <!-- subpackages, looking for classes that could be automatically registered as beans in the-->
    <!-- Spring container.-->
    <!-- By default, <context:component-scan> looks for classes that are annotated with one-->
    <!-- of a handful of special stereotype annotations:-->
    <!-- @Component—A general-purpose stereotype annotation indicating that the class-->
    <!-- is a Spring component-->
    <!---@Controller—Indicates that the class defines a Spring MVC controller-->
    <!-- @Repository—Indicates that the class defines a data repository-->
    <!-- @Service—Indicates that the class defines a service-->
    <!--Any custom annotation may be itself annotated with @Component-->

    <!--Do NOT also include the <context:annotation-config/> directive, it is automatically included by component scan-->

    <context:component-scan base-package="org.xander.spring.springIdol" >
        <context:include-filter type="assignable"
                                expression="org.xander.spring.springIdol.Instrument"/>
        <context:exclude-filter type="annotation"
                                expression="org.xander.spring.springIdol.SkipIt"/>
    </context:component-scan>

    <bean id="knife" class="org.xander.spring.springIdol.Knife" scope="prototype" />

    <bean id="knifeJuggler" class="org.xander.spring.springIdol.KnifeJuggler">
        <constructor-arg ref="knife"/>
    </bean>

    <bean id="danny" class="org.xander.spring.springIdol.Instrumentalist"
          p:instrument-ref="saxophone" />
</beans>